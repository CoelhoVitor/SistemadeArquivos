/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package so2trabalho2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Vitor
 */
public class TelaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();
    }
    
    public static int TAMANHO_MEMORIA = 1073741824;   //1 GB
    public static int TAMANHO_BLOCOS = 1024;       //1 KB
    public static int QUANTIDADE_BLOCOS_MEMORIA = (int) Math.ceil((double)TAMANHO_MEMORIA / TAMANHO_BLOCOS);    //1024 BLOCOS
    
    public static int idArquivo = 1;
    public static int tam = 0;

    //cria 1024 Blocos (nós)
    public static Bloco[] blocos = new Bloco[QUANTIDADE_BLOCOS_MEMORIA];
    
    //cria Lista
    public static List leds = new LinkedList();      
    
    //cria Memória
    public static Memoria memoria = new Memoria(TAMANHO_MEMORIA, blocos, leds);        

    //cria Diretorio (.vtr) an Área de Trabalho
    public static String diretorio = System.getProperty("user.home") + "/Desktop/Trabalho.vtr";
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitulo = new javax.swing.JLabel();
        btProcurar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtFile = new javax.swing.JTextPane();
        btInserir = new javax.swing.JButton();
        btRemover = new javax.swing.JButton();
        btDesfragmentar = new javax.swing.JButton();
        btLerArquivo = new javax.swing.JButton();
        lbTamanho = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        txtField = new javax.swing.JTextField();
        txtFieldLer = new javax.swing.JTextField();
        lbFrase1 = new javax.swing.JLabel();
        lbFrase2 = new javax.swing.JLabel();
        lbTamTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitulo.setText("Sistemas de Arquivos");
        lbTitulo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        btProcurar.setText("Procurar arquivo");
        btProcurar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btProcurarActionPerformed(evt);
            }
        });

        txtFile.setEnabled(false);
        jScrollPane2.setViewportView(txtFile);

        btInserir.setText("Inserir");
        btInserir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btInserir.setEnabled(false);
        btInserir.setMaximumSize(new java.awt.Dimension(105, 23));
        btInserir.setMinimumSize(new java.awt.Dimension(105, 23));
        btInserir.setPreferredSize(new java.awt.Dimension(105, 23));
        btInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInserirActionPerformed(evt);
            }
        });

        btRemover.setText("Remover");
        btRemover.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btRemover.setEnabled(false);
        btRemover.setMaximumSize(new java.awt.Dimension(105, 23));
        btRemover.setMinimumSize(new java.awt.Dimension(105, 23));
        btRemover.setPreferredSize(new java.awt.Dimension(105, 23));
        btRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoverActionPerformed(evt);
            }
        });

        btDesfragmentar.setText("Desfragmentar");
        btDesfragmentar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btDesfragmentar.setEnabled(false);
        btDesfragmentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDesfragmentarActionPerformed(evt);
            }
        });

        btLerArquivo.setText("Ler Arquivo");
        btLerArquivo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btLerArquivo.setEnabled(false);
        btLerArquivo.setMaximumSize(new java.awt.Dimension(105, 23));
        btLerArquivo.setMinimumSize(new java.awt.Dimension(105, 23));
        btLerArquivo.setPreferredSize(new java.awt.Dimension(105, 23));
        btLerArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLerArquivoActionPerformed(evt);
            }
        });

        lbTamanho.setText("0 Byte");
        lbTamanho.setEnabled(false);

        txtArea.setColumns(20);
        txtArea.setRows(5);
        txtArea.setEnabled(false);
        jScrollPane1.setViewportView(txtArea);

        txtField.setText("Insira o nome do arquivo a ser removido (incluir a extensão)");
        txtField.setEnabled(false);
        txtField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFieldMouseClicked(evt);
            }
        });
        txtField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFieldKeyPressed(evt);
            }
        });

        txtFieldLer.setText("Insira a Origem do arquivo a ser lido");
        txtFieldLer.setEnabled(false);
        txtFieldLer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFieldLerMouseClicked(evt);
            }
        });

        lbFrase1.setText("Memória em uso");
        lbFrase1.setEnabled(false);

        lbFrase2.setText("Tamanho da Memória");
        lbFrase2.setEnabled(false);

        lbTamTotal.setText("1 GB");
        lbTamTotal.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(323, 323, 323)
                .addComponent(lbTitulo)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                                .addComponent(txtFieldLer, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(txtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbFrase2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btRemover, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                        .addComponent(btInserir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btDesfragmentar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btLerArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(lbFrase1))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(lbTamTotal))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(lbTamanho))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(363, 363, 363)
                        .addComponent(btProcurar)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTitulo)
                .addGap(19, 19, 19)
                .addComponent(btProcurar)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btInserir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btRemover, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldLer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btLerArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btDesfragmentar)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbFrase1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbTamanho)
                        .addGap(16, 16, 16)
                        .addComponent(lbFrase2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbTamTotal)))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btProcurarActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Procurar arquivo");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int retorno = fileChooser.showOpenDialog(this);
        
        if(retorno == JFileChooser.APPROVE_OPTION){
            File file = fileChooser.getSelectedFile();
            txtFile.setText(file.getPath());
        }
        
        btInserir.setEnabled(true);
        txtFile.setEnabled(true);
    }//GEN-LAST:event_btProcurarActionPerformed

    private void btInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInserirActionPerformed
        String filePath = txtFile.getText();
        lbTamanho.setText(filePath); 
        
        SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String dataCriacao = fmt.format(new Date());
        
        //cria File para pegar o nome do arquivo a ser inserido
        File file = new File(txtFile.getText());
        Arquivo arquivo = new Arquivo(file.getName(), idArquivo++, filePath, dataCriacao);
        
        if(memoria.inserirNaMemoria(diretorio, filePath, arquivo, TAMANHO_BLOCOS, QUANTIDADE_BLOCOS_MEMORIA)){
            
            arquivo.setTamanho(memoria.atualizarTamanho(arquivo.getNome(), QUANTIDADE_BLOCOS_MEMORIA, TAMANHO_BLOCOS));
            
            txtArea.append("Arquivo:\n" + arquivo.getNome() + "\n\n"
                         + "Origem:\n" + arquivo.getOrigem() + "\n\n"
                         + "Tamanho do Arquivo:\n" + arquivo.getTamanhoReal() + "\n\n"
                         + "Tamanho na Memória:\n" + arquivo.getTamanho() + "\n\n"                         
                         + "Data de criação:\n" + arquivo.getData() + "\n\n"
                         + "---------------------------------------------------------------------------------------------------\n\n");
        }
        
        atualizarlbTamanho(memoria.atualizarTamanho(QUANTIDADE_BLOCOS_MEMORIA, TAMANHO_BLOCOS));
        
        enableComponents();
        
    }//GEN-LAST:event_btInserirActionPerformed

    private void btRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoverActionPerformed
        memoria.removerDaMemoria(txtField.getText(), QUANTIDADE_BLOCOS_MEMORIA);
        atualizarlbTamanho(memoria.atualizarTamanho(QUANTIDADE_BLOCOS_MEMORIA, TAMANHO_BLOCOS));
        
    }//GEN-LAST:event_btRemoverActionPerformed

    private void btDesfragmentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDesfragmentarActionPerformed
        
        memoria.desfragmentarMemoria(QUANTIDADE_BLOCOS_MEMORIA);        
        atualizarlbTamanho(memoria.atualizarTamanho(QUANTIDADE_BLOCOS_MEMORIA, TAMANHO_BLOCOS));
        
    }//GEN-LAST:event_btDesfragmentarActionPerformed

    private void btLerArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLerArquivoActionPerformed
        if(txtFieldLer.getText() == null || txtFieldLer.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Escreva um arquivo .txt para leitura");
            return;
        }  
        
        File file = new File(txtFieldLer.getText());
        String tipo;
        
        try {
            tipo = file.getName().substring(file.getName().lastIndexOf("."));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro");
            return;
        }
        
        if(!tipo.equals(".txt")){
            JOptionPane.showMessageDialog(null, "Erro: Só é possível exibir conteúdo com extensão .txt");
            return;
        }

        if(memoria.arquivoExisteNaMemoria(file.getName(), QUANTIDADE_BLOCOS_MEMORIA) == -1){
            JOptionPane.showMessageDialog(null, "Erro: Arquivo inexistente na Memória");
            return;
        }
        
        TelaExibir te = new TelaExibir(this, true);
        
        te.setTitle(file.getName());        
        
        String conteudo = lerArquivoTxt(file.getAbsolutePath());
        
        te.getjTextArea1().setText(conteudo);
        te.setVisible(true);        
        
    }//GEN-LAST:event_btLerArquivoActionPerformed

    private void txtFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFieldKeyPressed
        
    }//GEN-LAST:event_txtFieldKeyPressed

    private void txtFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFieldMouseClicked
        if(txtField.getText().equals("Insira o nome do arquivo a ser removido (incluir a extensão)"))
            txtField.setText("");
    }//GEN-LAST:event_txtFieldMouseClicked

    private void txtFieldLerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFieldLerMouseClicked
        if(txtFieldLer.getText().equals("Insira a Origem do arquivo a ser lido"))
            txtFieldLer.setText("");
    }//GEN-LAST:event_txtFieldLerMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaPrincipal tela = new TelaPrincipal();
                tela.setVisible(true);
                
                //cria Lista de Espaço Disponível (1024 posições)
                //e cria Blocos da Memória (1024 posições)
                for(int i = 0; i < QUANTIDADE_BLOCOS_MEMORIA; i++){
                    leds.add(0);
                    blocos[i] = new Bloco(i, TAMANHO_BLOCOS);
                }   
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDesfragmentar;
    private javax.swing.JButton btInserir;
    private javax.swing.JButton btLerArquivo;
    private javax.swing.JButton btProcurar;
    private javax.swing.JButton btRemover;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbFrase1;
    private javax.swing.JLabel lbFrase2;
    private javax.swing.JLabel lbTamTotal;
    private javax.swing.JLabel lbTamanho;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtField;
    private javax.swing.JTextField txtFieldLer;
    private javax.swing.JTextPane txtFile;
    // End of variables declaration//GEN-END:variables

    public void atualizarlbTamanho(int tamanhoArquivo){
        
        /*
         * Byte     = 1             Byte
         * KiloByte = 1024          Bytes
         * MegaByte = 1048576       Bytes
         * GigaByte = 1073741824    Bytes
        */        
        
        if (tamanhoArquivo < 1024){
            lbTamanho.setText(tamanhoArquivo/TAMANHO_BLOCOS + " Byte(s)");
        } else if (tamanhoArquivo < 1048576) {
            lbTamanho.setText(tamanhoArquivo/TAMANHO_BLOCOS + " KB");
        } else if (tamanhoArquivo < 1073741824) {
            lbTamanho.setText(tamanhoArquivo/TAMANHO_BLOCOS + " MB");
        } else 
            lbTamanho.setText(tamanhoArquivo/TAMANHO_BLOCOS + " GB");
    }
    
    public String lerArquivoTxt(String path){
        String conteudoLido = ""; 
        StringBuilder strBuilder = new StringBuilder(conteudoLido);
        
        try {
            FileReader arq = new FileReader(path);
            BufferedReader lerArq = new BufferedReader(arq);
            
            conteudoLido = lerArq.readLine();
            
            while(conteudoLido != null){ 
                strBuilder.append(conteudoLido);
                strBuilder.append(System.lineSeparator());
                conteudoLido = lerArq.readLine();                
            }
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro: Arquivo não encontrado na Memória");
            return "-1";
        }
        
        return strBuilder.toString();
    }
    
    public void enableComponents(){
        btRemover.setEnabled(true);
        btLerArquivo.setEnabled(true);
        btDesfragmentar.setEnabled(true);
        txtField.setEnabled(true);
        txtFieldLer.setEnabled(true);
        txtArea.setEnabled(true);
        lbTamanho.setEnabled(true);
        lbFrase1.setEnabled(true);
        lbFrase2.setEnabled(true);
        lbTamTotal.setEnabled(true);
    }
    
}
